PATH=$PATH:/home/kali/.local/bin

auto() {
        echo "changing keyboard and display configuration"
        setxkbmap -layout 'es,es' && xrandr --size 1920x1200
}

burp() {
#        LD_PRELOAD=/home/kali/burp/fake-user.so java -jar ls -t /home/kali/burp/burpsuite_pro_v2022.8.3.jar | head -1
        LD_PRELOAD=/home/kali/burp/fake-user.so java -jar `ls -t /home/kali/burp/burpsuite_pro_*.jar | head -1`
}


alias gohtb="cd ~/htb/"
alias govpn="cd ~/vpn/"
alias grip="grep -P '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}'"
alias gripo="grep -oP '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}'"
alias fuzz="cat ~/.fuzz"

function auto_fuzz(){
    echo "- [ ] my_ffuf.sh -u $1/FUZZ -w /usr/share/seclists/Discovery/Web-Content/common.txt -t 3"
    #my_ffuf.sh -u $1/FUZZ -w /usr/share/seclists/Discovery/Web-Content/common.txt -t 15 -of json
    echo "- [ ] dirsearch -u $1"
    #dirsearch -u $1
    echo "- [ ] feroxbuster -u $1 -B -n"
    echo "- [ ] feroxbuster -u $1"
    #feroxbuster -u $1 -B -n
    
    echo "- [ ] my_ffuf.sh -u $1/FUZZ -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt -t 3"
    #my_ffuf.sh -u $1/FUZZ -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt -t 3
    echo
    echo "#################################"
    echo
    domain=$(echo $1 | sed 's/https\?:\/\///g')
    echo "- [ ] ffuf -u $1 -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-20000.txt -H 'Host: FUZZ.$domain' --mc all"
    echo
    echo "- [ ] Revisar hostnames por netexec y por certificados ssl! -> Recuerda que tienes que usar la IP y no ningún otro hostname!!"
    echo "Extensiones recomendadas:"
    echo "- [ ] .pdf,.html,.php,.asp,.aspx"
    echo
    echo "#############Wordlists##################"
    echo "/usr/share/seclists/Discovery/Web-Content/common.txt"
    echo "/usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt"
    echo "/usr/share/wfuzz/wordlist/general/megabeast.txt"
}

alias ffufed="jq | grep -E '\"url\": |\"status\"|cmdline'"

function ffuf_gus() {
        statuses=$(cat *.json | jq | grep -E '"status"' | awk '{print $2}' | tr -d ",{" | sort | uniq | sed '/^[[:space:]]*$/d')
        echo $statuses
        echo
        echo
        echo "$statuses" | while read -r status_code; do
                echo
                echo
                echo -e "\e[32mCódigo de estado: $status_code\e[0m"
                cat *.json | jq | grep -E "status|url\":" | grep -A1 "status\": $status_code" | grep "url" | awk '{print $2":"$3}' FS=":" | tr -d '",'

        done
}


function auto_nmap(){
    echo "echo 'sudo nmap -sS -Pn -sV -p- -T4 -iL ips -oN ext.nmap -vvv --open'"
    echo "echo 'sudo nmap -sU -sV --top-ports=10 -T4 -iL ips -oN ext_UDP.nmap -vvv --open\ncat ext.nmap ext_UDP.nmap'"
}

function globalv(){
        cp ~/.zshrc ~/zshrc_bck
        echo "sed -i 's/^$1=.*//g' ~/.zshrc" | bash
        echo $1=$2 >> ~/.zshrc
        source ~/.zshrc
}

myip() {
        curl ifconfig.me
}


wakeonlan() {
        MAC=18:c0:4d:98:00:9fç
        echo -e $(echo $(printf 'f%.0s' {1..12}; printf "$(echo $MAC | sed 's/://g')%.0s" {1..16}) | sed -e 's/../\\x&/g') | nc -w1 -u -b 255.255.255.255 4000
}


#Hace un backup de un fichero en el mismo directorio como primer parámetro la ruta y como segundo el nombre del fichero
function makeBackUp() {
        date=$(date +"%Y-%m-%d-%h")
        zip -r $1/$(echo $date)_$(echo $2).zip $2
}


#Para eliminar ficheros de forma no recuperable
function rmk(){
    scrub -p dod $1
    shred -zun 10 -v $1
}



# Hacking shortcuts
alias smbServer='sudo impacket-smbserver smbFolder $(pwd) -smb2support'


function enum_smb() {
        echo "[*] crackmapexec:"
        echo "crackmapexec smb $ipv"
        echo "crackmapexec smb $ipv -u gunther -p password123!"
        echo "crackmapexec smb 10.10.10.1 -u users.txt -p password123"
        echo "crackmapexec smb 10.10.10.1 -u user1 -p password123 --shares"
	echo
        echo '[*] smbmap:'
        echo 'smbmap -u "" -p "" -P 445 -H $ipv'
        echo 'smbmap -u "guest" -p "" -P 445 -H $ipv'
        echo 'smbmap -H $ipv -u 0xdf'
        echo
        echo '[*] smbclient:'
        echo 'smbclient -N -L //$ipv'
        echo 'smbclient -L //$ipv -U "$user%$pass"'
        echo 'smbclient //$ipv/SYSVOL -U "$user%$pass"'
        echo 'smbclient //172.16.197.21/scripts -U "domain.com\user%password" --> Get the domain with netexec!!'
        echo '  smb: \> recurse ON'
        echo '  smb: \> prompt OFF'
        echo '  smb: \> mget *'
        echo
        echo "[*] Revisar metadatos de los ficheros!"
        echo "exiftool"
        echo
        echo '[*] rpcclient:'
        echo 'rpcclient -U "" $ipv -N'
        echo 'rpcclient $> enomdomusers'
        echo 'rpcclient $> enomdomgroups'
        echo 'rpcclient $> queryuser 0x1f4'
        echo 'rpcclient $> querydispinfo'
	echo
	echo 'enum4linux $ipv'
}

function smb_server() {
	echo "[*] smbserver.py -smb2support smbFolder $(pwd)"
}

function smb_check_writeable() {
	echo "[*] Remember mount the folder with"
	echo "mount -t cifs -o rw,username=guest,password= '//10.10.10.103/Department Shares' /mnt"
	echo
	echo "[*] Hazte root para poder escribir en /mnt así como recuerda aplicar bash"
	echo "[*] sudo su"
	echo "[*] bash"
	echo
	echo "Comenzando..."
	list=$(find /mnt -type d)
	for d in $list
		do
		echo "[*] Annalyzing directory $d"
		touch $d/x 2>/dev/null
		if [ $? -eq 0 ]
		then
		echo $d " is writable"
		fi
	done
}

function enum_ftp() {
        echo "[*] Checker:"
        echo "nmap -sT -Pn -p21 --script='ftp-anon' $ipv" 
        echo
        echo "[*] Descargar el contenido en local"
        echo "wget -r ftp://anonymous:anonymous@$ipv"
        echo "ftp> prompt"
        echo "ftp> mget *"
        echo
        echo "[*] Revisar metadatos de los ficheros!"
        echo "exiftool"
}

function mkt() {
        mkdir {nmap,content,exploits,scripts,fuzz,tmp,privesc}
}


#crackmapexec
function crackmapexec_map() {
    #TODO
    # Revisar si se pueden pasar ficheros como parámetros

    # En caso de no tener 3 parámetros en la llamada:
    if [ $# -ne 3 ]; then
        echo "Uso: crackmapexec_map \<ipv\> \<usuario\> \<contraseña\>"
        echo "Ejemplo: crackmapexec_map 10.10.10.77 tom '1ts-mag1c!!!'"
        return 1
    fi
    # Comando para crackmapexec y las credenciales
    crackmapexec_cmd="crackmapexec"
    ipv=$1
    username=$2
    password=$3
    password=$(echo $password | sed 's/!/\\!/g')

    # Iniciar una nueva sesión de tmux llamada "crackmapexec"
    tmux new-session -d -s crackmapexec

    # Dividir la ventana en 7 paneles
    tmux split-window -t crackmapexec:0 -h
    tmux split-window -t crackmapexec:0 -h
    tmux split-window -t crackmapexec:0 -h
    tmux split-window -t crackmapexec:0 -h
    tmux split-window -t crackmapexec:0 -h
    tmux split-window -t crackmapexec:0 -h

    # Ejecutar el comando crackmapexec en cada panel para cada servicio
    tmux send-keys -t crackmapexec:0.0 "$crackmapexec_cmd ftp $ipv -u \"$username\" -p \"$password\"" Enter
    tmux send-keys -t crackmapexec:0.1 "$crackmapexec_cmd ssh $ipv -u \"$username\" -p \"$password\"" Enter
    tmux send-keys -t crackmapexec:0.2 "$crackmapexec_cmd rdp $ipv -u \"$username\" -p \"$password\"" Enter
    tmux send-keys -t crackmapexec:0.3 "$crackmapexec_cmd smb $ipv -u \"$username\" -p \"$password\"" Enter
    tmux send-keys -t crackmapexec:0.4 "$crackmapexec_cmd ldap $ipv -u \"$username\" -p \"$password\"" Enter
    tmux send-keys -t crackmapexec:0.5 "$crackmapexec_cmd winrm $ipv -u \"$username\" -p \"$password\"" Enter
    tmux send-keys -t crackmapexec:0.6 "$crackmapexec_cmd mssql $ipv -u \"$username\" -p \"$password\"" Enter

    # Seleccionar el primer panel
    tmux select-pane -t crackmapexec:0.0

    # Unir todos los paneles
    tmux select-layout -t crackmapexec:0 tiled

    # Attach a la sesión de tmux
    tmux attach-session -t crackmapexec
}

#################################################################################################3
#Infrastructure
#Just pass as paremeter a file with the different domains you need and this add http and https at the begin
function addhttp(){
    rm -f $(echo $1)_http
    while read -r line;
    do
    echo $line | sed 's/^/http:\/\//g' >> $(echo $1)_http
    echo $line | sed 's/^/https:\/\//g' >> $(echo $1)_http
    done < $1
}


#nmap scans
## falta añadir UDP!!!
function scan_nmap(){
        sudo nmap -sS --min-rate 2000 -p- -Pn -n $1 -oN allPorts_$1 -vv
        ports=$(cat allPorts_$1 | grep -oP "\d{1,5}/tcp" | tr -d "/tcp" | tr "\n" ",")
        nmap -sCV -p$(echo $ports) -Pn -n  $1 -oN target_$(echo $1).nmap
	sudo nmap -sU --top-port=20 $1 --open -oN UDP_target_$(echo $1).nmap
	cat *_$1
}
alias gP='grep -oP "\d{1,5}/tcp" | tr -d "/tcp" | tr "\n" "," | xclip -sel c'


# FUZZ
alias my_ffuf="~/.local/bin/my_ffuf.sh"

function ffuf_extract(){
    cat $1 | jq | grep -P '"FUZZ":|"status":' | awk '{print $2}' FS=":" | sed 's/^[ \t]*//' |  tr -d '",\{' | awk 'NR%2!=0{printf "%s -> ",$0;next;}1'

}

# Loops
alias template_loop="cat /home/kali/.local/bin/template_loop.sh"

# Netexec auto-testing creds
function netexec_auto(){
    # Obtener los servicios y almacenar cada línea como un elemento de un array
    services=("${(@f)$(netexec | grep own | awk '{print $1}')}")

    # Bucle para recorrer cada servicio en 'services'
    for service in $services; do
        echo "netexec $service $1 $2 $3 $4 $5 $6 $7 $8 $9 $10"
    done
    echo
    for service in $services; do
        echo "netexec $service $1 $2 $3 $4 $5 $6 $7 $8 $9 $10 --local-auth"
    done
}

# SMTP
function smpt_enum(){
	echo "nmap -p25 --script smtp-commands $ipv -Pn"
	echo "nmap -p25 --script smtp-open-relay $ipv -v -Pn"
	echo "[*] Recuerda modificar el wordlist para añadirle a cada usuario @dominio"
	echo "[*] cp /usr/share/seclists/Usernames/cirt-default-usernames.txt test-users.txt && sed -i 's/$/@domain.com/' test-users.txt"
	echo
	echo "smtp-user-enum -M RCPT -U test-users.txt -t 10.10.10.77"
	echo
	echo "[*] Phising Over Open Relay"
	echo '[*] sendEmail -f 0xdf@megabank.com -t nico@megabank.com -u "Invoice Attached" -m "You are overdue payment" -a invoice.rtf -s 10.10.10.77 -v'
	echo '[*] sendEmail -f 0xdf@megabank.com -t nico@megabank.com -u "Invoice Attached" -m "You are overdue payment" -a invoice.rtf -s 10.10.10.77 -v'
	echo "	-f - from address, can be anything as long as the domain exists
		-t - to address, `nico@megabank.com`
		-u - subject
		-m - body
		-a - attachment
		-s - smtp server
		-v - verbose"
}

alias tty="echo 'script /dev/null -c bash \nCtrl + z \nstty raw -echo; fg'"

alias clipfix="ps aux | grep 'clip'  | awk '{print $2}' | xargs | sed 's/^/kill -9 /g' | sed 's/$/; \/usr\/bin\/VBoxClient --clipboard/g' | bash"

alias parshell="/home/kali/.local/bin/parshell.sh"

alias enumdom="sed 's/^/nslookup /g' | sed 's/$/ | Select-String \-Pattern \"Name\:\|Address:\" \-Context 0\,1/g'"

